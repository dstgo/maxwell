// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/job"
	"github.com/dstgo/maxwell/ent/mount"
	"github.com/dstgo/maxwell/ent/node"
	"github.com/dstgo/maxwell/ent/port"
	"github.com/dstgo/maxwell/ent/predicate"
	"github.com/dstgo/maxwell/ent/user"
)

// ContainerUpdate is the builder for updating Container entities.
type ContainerUpdate struct {
	config
	hooks    []Hook
	mutation *ContainerMutation
}

// Where appends a list predicates to the ContainerUpdate builder.
func (cu *ContainerUpdate) Where(ps ...predicate.Container) *ContainerUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetName sets the "name" field.
func (cu *ContainerUpdate) SetName(s string) *ContainerUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ContainerUpdate) SetNillableName(s *string) *ContainerUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// SetCid sets the "cid" field.
func (cu *ContainerUpdate) SetCid(s string) *ContainerUpdate {
	cu.mutation.SetCid(s)
	return cu
}

// SetNillableCid sets the "cid" field if the given value is not nil.
func (cu *ContainerUpdate) SetNillableCid(s *string) *ContainerUpdate {
	if s != nil {
		cu.SetCid(*s)
	}
	return cu
}

// SetImage sets the "image" field.
func (cu *ContainerUpdate) SetImage(s string) *ContainerUpdate {
	cu.mutation.SetImage(s)
	return cu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (cu *ContainerUpdate) SetNillableImage(s *string) *ContainerUpdate {
	if s != nil {
		cu.SetImage(*s)
	}
	return cu
}

// SetCPU sets the "cpu" field.
func (cu *ContainerUpdate) SetCPU(i int64) *ContainerUpdate {
	cu.mutation.ResetCPU()
	cu.mutation.SetCPU(i)
	return cu
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (cu *ContainerUpdate) SetNillableCPU(i *int64) *ContainerUpdate {
	if i != nil {
		cu.SetCPU(*i)
	}
	return cu
}

// AddCPU adds i to the "cpu" field.
func (cu *ContainerUpdate) AddCPU(i int64) *ContainerUpdate {
	cu.mutation.AddCPU(i)
	return cu
}

// SetMemory sets the "memory" field.
func (cu *ContainerUpdate) SetMemory(i int64) *ContainerUpdate {
	cu.mutation.ResetMemory()
	cu.mutation.SetMemory(i)
	return cu
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (cu *ContainerUpdate) SetNillableMemory(i *int64) *ContainerUpdate {
	if i != nil {
		cu.SetMemory(*i)
	}
	return cu
}

// AddMemory adds i to the "memory" field.
func (cu *ContainerUpdate) AddMemory(i int64) *ContainerUpdate {
	cu.mutation.AddMemory(i)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ContainerUpdate) SetCreatedAt(i int64) *ContainerUpdate {
	cu.mutation.ResetCreatedAt()
	cu.mutation.SetCreatedAt(i)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ContainerUpdate) SetNillableCreatedAt(i *int64) *ContainerUpdate {
	if i != nil {
		cu.SetCreatedAt(*i)
	}
	return cu
}

// AddCreatedAt adds i to the "created_at" field.
func (cu *ContainerUpdate) AddCreatedAt(i int64) *ContainerUpdate {
	cu.mutation.AddCreatedAt(i)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ContainerUpdate) SetUpdatedAt(i int64) *ContainerUpdate {
	cu.mutation.ResetUpdatedAt()
	cu.mutation.SetUpdatedAt(i)
	return cu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cu *ContainerUpdate) AddUpdatedAt(i int64) *ContainerUpdate {
	cu.mutation.AddUpdatedAt(i)
	return cu
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (cu *ContainerUpdate) AddOwnerIDs(ids ...int) *ContainerUpdate {
	cu.mutation.AddOwnerIDs(ids...)
	return cu
}

// AddOwner adds the "owner" edges to the User entity.
func (cu *ContainerUpdate) AddOwner(u ...*User) *ContainerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.AddOwnerIDs(ids...)
}

// AddNodeIDs adds the "node" edge to the Node entity by IDs.
func (cu *ContainerUpdate) AddNodeIDs(ids ...int) *ContainerUpdate {
	cu.mutation.AddNodeIDs(ids...)
	return cu
}

// AddNode adds the "node" edges to the Node entity.
func (cu *ContainerUpdate) AddNode(n ...*Node) *ContainerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.AddNodeIDs(ids...)
}

// AddMountIDs adds the "mounts" edge to the Mount entity by IDs.
func (cu *ContainerUpdate) AddMountIDs(ids ...int) *ContainerUpdate {
	cu.mutation.AddMountIDs(ids...)
	return cu
}

// AddMounts adds the "mounts" edges to the Mount entity.
func (cu *ContainerUpdate) AddMounts(m ...*Mount) *ContainerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMountIDs(ids...)
}

// AddPortIDs adds the "ports" edge to the Port entity by IDs.
func (cu *ContainerUpdate) AddPortIDs(ids ...int) *ContainerUpdate {
	cu.mutation.AddPortIDs(ids...)
	return cu
}

// AddPorts adds the "ports" edges to the Port entity.
func (cu *ContainerUpdate) AddPorts(p ...*Port) *ContainerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.AddPortIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (cu *ContainerUpdate) AddJobIDs(ids ...int) *ContainerUpdate {
	cu.mutation.AddJobIDs(ids...)
	return cu
}

// AddJobs adds the "jobs" edges to the Job entity.
func (cu *ContainerUpdate) AddJobs(j ...*Job) *ContainerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cu.AddJobIDs(ids...)
}

// Mutation returns the ContainerMutation object of the builder.
func (cu *ContainerUpdate) Mutation() *ContainerMutation {
	return cu.mutation
}

// ClearOwner clears all "owner" edges to the User entity.
func (cu *ContainerUpdate) ClearOwner() *ContainerUpdate {
	cu.mutation.ClearOwner()
	return cu
}

// RemoveOwnerIDs removes the "owner" edge to User entities by IDs.
func (cu *ContainerUpdate) RemoveOwnerIDs(ids ...int) *ContainerUpdate {
	cu.mutation.RemoveOwnerIDs(ids...)
	return cu
}

// RemoveOwner removes "owner" edges to User entities.
func (cu *ContainerUpdate) RemoveOwner(u ...*User) *ContainerUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cu.RemoveOwnerIDs(ids...)
}

// ClearNode clears all "node" edges to the Node entity.
func (cu *ContainerUpdate) ClearNode() *ContainerUpdate {
	cu.mutation.ClearNode()
	return cu
}

// RemoveNodeIDs removes the "node" edge to Node entities by IDs.
func (cu *ContainerUpdate) RemoveNodeIDs(ids ...int) *ContainerUpdate {
	cu.mutation.RemoveNodeIDs(ids...)
	return cu
}

// RemoveNode removes "node" edges to Node entities.
func (cu *ContainerUpdate) RemoveNode(n ...*Node) *ContainerUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cu.RemoveNodeIDs(ids...)
}

// ClearMounts clears all "mounts" edges to the Mount entity.
func (cu *ContainerUpdate) ClearMounts() *ContainerUpdate {
	cu.mutation.ClearMounts()
	return cu
}

// RemoveMountIDs removes the "mounts" edge to Mount entities by IDs.
func (cu *ContainerUpdate) RemoveMountIDs(ids ...int) *ContainerUpdate {
	cu.mutation.RemoveMountIDs(ids...)
	return cu
}

// RemoveMounts removes "mounts" edges to Mount entities.
func (cu *ContainerUpdate) RemoveMounts(m ...*Mount) *ContainerUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMountIDs(ids...)
}

// ClearPorts clears all "ports" edges to the Port entity.
func (cu *ContainerUpdate) ClearPorts() *ContainerUpdate {
	cu.mutation.ClearPorts()
	return cu
}

// RemovePortIDs removes the "ports" edge to Port entities by IDs.
func (cu *ContainerUpdate) RemovePortIDs(ids ...int) *ContainerUpdate {
	cu.mutation.RemovePortIDs(ids...)
	return cu
}

// RemovePorts removes "ports" edges to Port entities.
func (cu *ContainerUpdate) RemovePorts(p ...*Port) *ContainerUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cu.RemovePortIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (cu *ContainerUpdate) ClearJobs() *ContainerUpdate {
	cu.mutation.ClearJobs()
	return cu
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (cu *ContainerUpdate) RemoveJobIDs(ids ...int) *ContainerUpdate {
	cu.mutation.RemoveJobIDs(ids...)
	return cu
}

// RemoveJobs removes "jobs" edges to Job entities.
func (cu *ContainerUpdate) RemoveJobs(j ...*Job) *ContainerUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cu.RemoveJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ContainerUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ContainerUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ContainerUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ContainerUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ContainerUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := container.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

func (cu *ContainerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(container.Table, container.Columns, sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(container.FieldName, field.TypeString, value)
	}
	if value, ok := cu.mutation.Cid(); ok {
		_spec.SetField(container.FieldCid, field.TypeString, value)
	}
	if value, ok := cu.mutation.Image(); ok {
		_spec.SetField(container.FieldImage, field.TypeString, value)
	}
	if value, ok := cu.mutation.CPU(); ok {
		_spec.SetField(container.FieldCPU, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCPU(); ok {
		_spec.AddField(container.FieldCPU, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Memory(); ok {
		_spec.SetField(container.FieldMemory, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedMemory(); ok {
		_spec.AddField(container.FieldMemory, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(container.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(container.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(container.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(container.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !cu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedNodeIDs(); len(nodes) > 0 && !cu.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.MountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMountsIDs(); len(nodes) > 0 && !cu.mutation.MountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.PortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedPortsIDs(); len(nodes) > 0 && !cu.mutation.PortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedJobsIDs(); len(nodes) > 0 && !cu.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{container.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ContainerUpdateOne is the builder for updating a single Container entity.
type ContainerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ContainerMutation
}

// SetName sets the "name" field.
func (cuo *ContainerUpdateOne) SetName(s string) *ContainerUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ContainerUpdateOne) SetNillableName(s *string) *ContainerUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// SetCid sets the "cid" field.
func (cuo *ContainerUpdateOne) SetCid(s string) *ContainerUpdateOne {
	cuo.mutation.SetCid(s)
	return cuo
}

// SetNillableCid sets the "cid" field if the given value is not nil.
func (cuo *ContainerUpdateOne) SetNillableCid(s *string) *ContainerUpdateOne {
	if s != nil {
		cuo.SetCid(*s)
	}
	return cuo
}

// SetImage sets the "image" field.
func (cuo *ContainerUpdateOne) SetImage(s string) *ContainerUpdateOne {
	cuo.mutation.SetImage(s)
	return cuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (cuo *ContainerUpdateOne) SetNillableImage(s *string) *ContainerUpdateOne {
	if s != nil {
		cuo.SetImage(*s)
	}
	return cuo
}

// SetCPU sets the "cpu" field.
func (cuo *ContainerUpdateOne) SetCPU(i int64) *ContainerUpdateOne {
	cuo.mutation.ResetCPU()
	cuo.mutation.SetCPU(i)
	return cuo
}

// SetNillableCPU sets the "cpu" field if the given value is not nil.
func (cuo *ContainerUpdateOne) SetNillableCPU(i *int64) *ContainerUpdateOne {
	if i != nil {
		cuo.SetCPU(*i)
	}
	return cuo
}

// AddCPU adds i to the "cpu" field.
func (cuo *ContainerUpdateOne) AddCPU(i int64) *ContainerUpdateOne {
	cuo.mutation.AddCPU(i)
	return cuo
}

// SetMemory sets the "memory" field.
func (cuo *ContainerUpdateOne) SetMemory(i int64) *ContainerUpdateOne {
	cuo.mutation.ResetMemory()
	cuo.mutation.SetMemory(i)
	return cuo
}

// SetNillableMemory sets the "memory" field if the given value is not nil.
func (cuo *ContainerUpdateOne) SetNillableMemory(i *int64) *ContainerUpdateOne {
	if i != nil {
		cuo.SetMemory(*i)
	}
	return cuo
}

// AddMemory adds i to the "memory" field.
func (cuo *ContainerUpdateOne) AddMemory(i int64) *ContainerUpdateOne {
	cuo.mutation.AddMemory(i)
	return cuo
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ContainerUpdateOne) SetCreatedAt(i int64) *ContainerUpdateOne {
	cuo.mutation.ResetCreatedAt()
	cuo.mutation.SetCreatedAt(i)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ContainerUpdateOne) SetNillableCreatedAt(i *int64) *ContainerUpdateOne {
	if i != nil {
		cuo.SetCreatedAt(*i)
	}
	return cuo
}

// AddCreatedAt adds i to the "created_at" field.
func (cuo *ContainerUpdateOne) AddCreatedAt(i int64) *ContainerUpdateOne {
	cuo.mutation.AddCreatedAt(i)
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ContainerUpdateOne) SetUpdatedAt(i int64) *ContainerUpdateOne {
	cuo.mutation.ResetUpdatedAt()
	cuo.mutation.SetUpdatedAt(i)
	return cuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (cuo *ContainerUpdateOne) AddUpdatedAt(i int64) *ContainerUpdateOne {
	cuo.mutation.AddUpdatedAt(i)
	return cuo
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (cuo *ContainerUpdateOne) AddOwnerIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.AddOwnerIDs(ids...)
	return cuo
}

// AddOwner adds the "owner" edges to the User entity.
func (cuo *ContainerUpdateOne) AddOwner(u ...*User) *ContainerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.AddOwnerIDs(ids...)
}

// AddNodeIDs adds the "node" edge to the Node entity by IDs.
func (cuo *ContainerUpdateOne) AddNodeIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.AddNodeIDs(ids...)
	return cuo
}

// AddNode adds the "node" edges to the Node entity.
func (cuo *ContainerUpdateOne) AddNode(n ...*Node) *ContainerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.AddNodeIDs(ids...)
}

// AddMountIDs adds the "mounts" edge to the Mount entity by IDs.
func (cuo *ContainerUpdateOne) AddMountIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.AddMountIDs(ids...)
	return cuo
}

// AddMounts adds the "mounts" edges to the Mount entity.
func (cuo *ContainerUpdateOne) AddMounts(m ...*Mount) *ContainerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMountIDs(ids...)
}

// AddPortIDs adds the "ports" edge to the Port entity by IDs.
func (cuo *ContainerUpdateOne) AddPortIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.AddPortIDs(ids...)
	return cuo
}

// AddPorts adds the "ports" edges to the Port entity.
func (cuo *ContainerUpdateOne) AddPorts(p ...*Port) *ContainerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.AddPortIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (cuo *ContainerUpdateOne) AddJobIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.AddJobIDs(ids...)
	return cuo
}

// AddJobs adds the "jobs" edges to the Job entity.
func (cuo *ContainerUpdateOne) AddJobs(j ...*Job) *ContainerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cuo.AddJobIDs(ids...)
}

// Mutation returns the ContainerMutation object of the builder.
func (cuo *ContainerUpdateOne) Mutation() *ContainerMutation {
	return cuo.mutation
}

// ClearOwner clears all "owner" edges to the User entity.
func (cuo *ContainerUpdateOne) ClearOwner() *ContainerUpdateOne {
	cuo.mutation.ClearOwner()
	return cuo
}

// RemoveOwnerIDs removes the "owner" edge to User entities by IDs.
func (cuo *ContainerUpdateOne) RemoveOwnerIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.RemoveOwnerIDs(ids...)
	return cuo
}

// RemoveOwner removes "owner" edges to User entities.
func (cuo *ContainerUpdateOne) RemoveOwner(u ...*User) *ContainerUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cuo.RemoveOwnerIDs(ids...)
}

// ClearNode clears all "node" edges to the Node entity.
func (cuo *ContainerUpdateOne) ClearNode() *ContainerUpdateOne {
	cuo.mutation.ClearNode()
	return cuo
}

// RemoveNodeIDs removes the "node" edge to Node entities by IDs.
func (cuo *ContainerUpdateOne) RemoveNodeIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.RemoveNodeIDs(ids...)
	return cuo
}

// RemoveNode removes "node" edges to Node entities.
func (cuo *ContainerUpdateOne) RemoveNode(n ...*Node) *ContainerUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cuo.RemoveNodeIDs(ids...)
}

// ClearMounts clears all "mounts" edges to the Mount entity.
func (cuo *ContainerUpdateOne) ClearMounts() *ContainerUpdateOne {
	cuo.mutation.ClearMounts()
	return cuo
}

// RemoveMountIDs removes the "mounts" edge to Mount entities by IDs.
func (cuo *ContainerUpdateOne) RemoveMountIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.RemoveMountIDs(ids...)
	return cuo
}

// RemoveMounts removes "mounts" edges to Mount entities.
func (cuo *ContainerUpdateOne) RemoveMounts(m ...*Mount) *ContainerUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMountIDs(ids...)
}

// ClearPorts clears all "ports" edges to the Port entity.
func (cuo *ContainerUpdateOne) ClearPorts() *ContainerUpdateOne {
	cuo.mutation.ClearPorts()
	return cuo
}

// RemovePortIDs removes the "ports" edge to Port entities by IDs.
func (cuo *ContainerUpdateOne) RemovePortIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.RemovePortIDs(ids...)
	return cuo
}

// RemovePorts removes "ports" edges to Port entities.
func (cuo *ContainerUpdateOne) RemovePorts(p ...*Port) *ContainerUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cuo.RemovePortIDs(ids...)
}

// ClearJobs clears all "jobs" edges to the Job entity.
func (cuo *ContainerUpdateOne) ClearJobs() *ContainerUpdateOne {
	cuo.mutation.ClearJobs()
	return cuo
}

// RemoveJobIDs removes the "jobs" edge to Job entities by IDs.
func (cuo *ContainerUpdateOne) RemoveJobIDs(ids ...int) *ContainerUpdateOne {
	cuo.mutation.RemoveJobIDs(ids...)
	return cuo
}

// RemoveJobs removes "jobs" edges to Job entities.
func (cuo *ContainerUpdateOne) RemoveJobs(j ...*Job) *ContainerUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cuo.RemoveJobIDs(ids...)
}

// Where appends a list predicates to the ContainerUpdate builder.
func (cuo *ContainerUpdateOne) Where(ps ...predicate.Container) *ContainerUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ContainerUpdateOne) Select(field string, fields ...string) *ContainerUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Container entity.
func (cuo *ContainerUpdateOne) Save(ctx context.Context) (*Container, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ContainerUpdateOne) SaveX(ctx context.Context) *Container {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ContainerUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ContainerUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ContainerUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := container.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

func (cuo *ContainerUpdateOne) sqlSave(ctx context.Context) (_node *Container, err error) {
	_spec := sqlgraph.NewUpdateSpec(container.Table, container.Columns, sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Container.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, container.FieldID)
		for _, f := range fields {
			if !container.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != container.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(container.FieldName, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Cid(); ok {
		_spec.SetField(container.FieldCid, field.TypeString, value)
	}
	if value, ok := cuo.mutation.Image(); ok {
		_spec.SetField(container.FieldImage, field.TypeString, value)
	}
	if value, ok := cuo.mutation.CPU(); ok {
		_spec.SetField(container.FieldCPU, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCPU(); ok {
		_spec.AddField(container.FieldCPU, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Memory(); ok {
		_spec.SetField(container.FieldMemory, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedMemory(); ok {
		_spec.AddField(container.FieldMemory, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(container.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(container.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(container.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(container.FieldUpdatedAt, field.TypeInt64, value)
	}
	if cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !cuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedNodeIDs(); len(nodes) > 0 && !cuo.mutation.NodeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.MountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMountsIDs(); len(nodes) > 0 && !cuo.mutation.MountsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.PortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedPortsIDs(); len(nodes) > 0 && !cuo.mutation.PortsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedJobsIDs(); len(nodes) > 0 && !cuo.mutation.JobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Container{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{container.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
