// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/node"
	"github.com/dstgo/maxwell/ent/predicate"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUID sets the "uid" field.
func (nu *NodeUpdate) SetUID(s string) *NodeUpdate {
	nu.mutation.SetUID(s)
	return nu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableUID(s *string) *NodeUpdate {
	if s != nil {
		nu.SetUID(*s)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NodeUpdate) SetName(s string) *NodeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetAddress sets the "address" field.
func (nu *NodeUpdate) SetAddress(s string) *NodeUpdate {
	nu.mutation.SetAddress(s)
	return nu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableAddress(s *string) *NodeUpdate {
	if s != nil {
		nu.SetAddress(*s)
	}
	return nu
}

// SetNote sets the "note" field.
func (nu *NodeUpdate) SetNote(s string) *NodeUpdate {
	nu.mutation.SetNote(s)
	return nu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableNote(s *string) *NodeUpdate {
	if s != nil {
		nu.SetNote(*s)
	}
	return nu
}

// SetCreatedAt sets the "created_at" field.
func (nu *NodeUpdate) SetCreatedAt(i int64) *NodeUpdate {
	nu.mutation.ResetCreatedAt()
	nu.mutation.SetCreatedAt(i)
	return nu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCreatedAt(i *int64) *NodeUpdate {
	if i != nil {
		nu.SetCreatedAt(*i)
	}
	return nu
}

// AddCreatedAt adds i to the "created_at" field.
func (nu *NodeUpdate) AddCreatedAt(i int64) *NodeUpdate {
	nu.mutation.AddCreatedAt(i)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NodeUpdate) SetUpdatedAt(i int64) *NodeUpdate {
	nu.mutation.ResetUpdatedAt()
	nu.mutation.SetUpdatedAt(i)
	return nu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (nu *NodeUpdate) AddUpdatedAt(i int64) *NodeUpdate {
	nu.mutation.AddUpdatedAt(i)
	return nu
}

// AddContainerIDs adds the "containers" edge to the Container entity by IDs.
func (nu *NodeUpdate) AddContainerIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddContainerIDs(ids...)
	return nu
}

// AddContainers adds the "containers" edges to the Container entity.
func (nu *NodeUpdate) AddContainers(c ...*Container) *NodeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.AddContainerIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// ClearContainers clears all "containers" edges to the Container entity.
func (nu *NodeUpdate) ClearContainers() *NodeUpdate {
	nu.mutation.ClearContainers()
	return nu
}

// RemoveContainerIDs removes the "containers" edge to Container entities by IDs.
func (nu *NodeUpdate) RemoveContainerIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveContainerIDs(ids...)
	return nu
}

// RemoveContainers removes "containers" edges to Container entities.
func (nu *NodeUpdate) RemoveContainers(c ...*Container) *NodeUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nu.RemoveContainerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	nu.defaults()
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NodeUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok {
		v := node.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UID(); ok {
		_spec.SetField(node.FieldUID, field.TypeString, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Address(); ok {
		_spec.SetField(node.FieldAddress, field.TypeString, value)
	}
	if value, ok := nu.mutation.Note(); ok {
		_spec.SetField(node.FieldNote, field.TypeString, value)
	}
	if value, ok := nu.mutation.CreatedAt(); ok {
		_spec.SetField(node.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(node.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := nu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if nu.mutation.ContainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ContainersTable,
			Columns: node.ContainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedContainersIDs(); len(nodes) > 0 && !nu.mutation.ContainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ContainersTable,
			Columns: node.ContainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.ContainersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ContainersTable,
			Columns: node.ContainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetUID sets the "uid" field.
func (nuo *NodeUpdateOne) SetUID(s string) *NodeUpdateOne {
	nuo.mutation.SetUID(s)
	return nuo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableUID(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetUID(*s)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NodeUpdateOne) SetName(s string) *NodeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetAddress sets the "address" field.
func (nuo *NodeUpdateOne) SetAddress(s string) *NodeUpdateOne {
	nuo.mutation.SetAddress(s)
	return nuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableAddress(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetAddress(*s)
	}
	return nuo
}

// SetNote sets the "note" field.
func (nuo *NodeUpdateOne) SetNote(s string) *NodeUpdateOne {
	nuo.mutation.SetNote(s)
	return nuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableNote(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetNote(*s)
	}
	return nuo
}

// SetCreatedAt sets the "created_at" field.
func (nuo *NodeUpdateOne) SetCreatedAt(i int64) *NodeUpdateOne {
	nuo.mutation.ResetCreatedAt()
	nuo.mutation.SetCreatedAt(i)
	return nuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCreatedAt(i *int64) *NodeUpdateOne {
	if i != nil {
		nuo.SetCreatedAt(*i)
	}
	return nuo
}

// AddCreatedAt adds i to the "created_at" field.
func (nuo *NodeUpdateOne) AddCreatedAt(i int64) *NodeUpdateOne {
	nuo.mutation.AddCreatedAt(i)
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NodeUpdateOne) SetUpdatedAt(i int64) *NodeUpdateOne {
	nuo.mutation.ResetUpdatedAt()
	nuo.mutation.SetUpdatedAt(i)
	return nuo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (nuo *NodeUpdateOne) AddUpdatedAt(i int64) *NodeUpdateOne {
	nuo.mutation.AddUpdatedAt(i)
	return nuo
}

// AddContainerIDs adds the "containers" edge to the Container entity by IDs.
func (nuo *NodeUpdateOne) AddContainerIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddContainerIDs(ids...)
	return nuo
}

// AddContainers adds the "containers" edges to the Container entity.
func (nuo *NodeUpdateOne) AddContainers(c ...*Container) *NodeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.AddContainerIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// ClearContainers clears all "containers" edges to the Container entity.
func (nuo *NodeUpdateOne) ClearContainers() *NodeUpdateOne {
	nuo.mutation.ClearContainers()
	return nuo
}

// RemoveContainerIDs removes the "containers" edge to Container entities by IDs.
func (nuo *NodeUpdateOne) RemoveContainerIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveContainerIDs(ids...)
	return nuo
}

// RemoveContainers removes "containers" edges to Container entities.
func (nuo *NodeUpdateOne) RemoveContainers(c ...*Container) *NodeUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return nuo.RemoveContainerIDs(ids...)
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	nuo.defaults()
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NodeUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok {
		v := node.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UID(); ok {
		_spec.SetField(node.FieldUID, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Address(); ok {
		_spec.SetField(node.FieldAddress, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Note(); ok {
		_spec.SetField(node.FieldNote, field.TypeString, value)
	}
	if value, ok := nuo.mutation.CreatedAt(); ok {
		_spec.SetField(node.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(node.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.SetField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := nuo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(node.FieldUpdatedAt, field.TypeInt64, value)
	}
	if nuo.mutation.ContainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ContainersTable,
			Columns: node.ContainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedContainersIDs(); len(nodes) > 0 && !nuo.mutation.ContainersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ContainersTable,
			Columns: node.ContainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.ContainersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.ContainersTable,
			Columns: node.ContainersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
