// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dstgo/maxwell/ent/mount"
)

// container mount record table
type Mount struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Host holds the value of the "host" field.
	Host string `json:"host,omitempty"`
	// Bind holds the value of the "bind" field.
	Bind string `json:"bind,omitempty"`
	// IsDir holds the value of the "is_dir" field.
	IsDir bool `json:"is_dir,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MountQuery when eager-loading is set.
	Edges        MountEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MountEdges holds the relations/edges for other nodes in the graph.
type MountEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*Container `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e MountEdges) OwnerOrErr() ([]*Container, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mount) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mount.FieldIsDir:
			values[i] = new(sql.NullBool)
		case mount.FieldID, mount.FieldCreatedAt, mount.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		case mount.FieldHost, mount.FieldBind:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mount fields.
func (m *Mount) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mount.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			m.ID = int(value.Int64)
		case mount.FieldHost:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				m.Host = value.String
			}
		case mount.FieldBind:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bind", values[i])
			} else if value.Valid {
				m.Bind = value.String
			}
		case mount.FieldIsDir:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_dir", values[i])
			} else if value.Valid {
				m.IsDir = value.Bool
			}
		case mount.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Int64
			}
		case mount.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Int64
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mount.
// This includes values selected through modifiers, order, etc.
func (m *Mount) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Mount entity.
func (m *Mount) QueryOwner() *ContainerQuery {
	return NewMountClient(m.config).QueryOwner(m)
}

// Update returns a builder for updating this Mount.
// Note that you need to call Mount.Unwrap() before calling this method if this Mount
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mount) Update() *MountUpdateOne {
	return NewMountClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mount entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mount) Unwrap() *Mount {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mount is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mount) String() string {
	var builder strings.Builder
	builder.WriteString("Mount(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("host=")
	builder.WriteString(m.Host)
	builder.WriteString(", ")
	builder.WriteString("bind=")
	builder.WriteString(m.Bind)
	builder.WriteString(", ")
	builder.WriteString("is_dir=")
	builder.WriteString(fmt.Sprintf("%v", m.IsDir))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", m.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", m.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Mounts is a parsable slice of Mount.
type Mounts []*Mount
