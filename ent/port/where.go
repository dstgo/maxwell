// Code generated by ent, DO NOT EDIT.

package port

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/dstgo/maxwell/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Port {
	return predicate.Port(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Port {
	return predicate.Port(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Port {
	return predicate.Port(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Port {
	return predicate.Port(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Port {
	return predicate.Port(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Port {
	return predicate.Port(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Port {
	return predicate.Port(sql.FieldLTE(FieldID, id))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldHost, v))
}

// Bind applies equality check predicate on the "bind" field. It's identical to BindEQ.
func Bind(v int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldBind, v))
}

// Protocol applies equality check predicate on the "protocol" field. It's identical to ProtocolEQ.
func Protocol(v int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldProtocol, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldUpdatedAt, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v int) predicate.Port {
	return predicate.Port(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...int) predicate.Port {
	return predicate.Port(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...int) predicate.Port {
	return predicate.Port(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v int) predicate.Port {
	return predicate.Port(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v int) predicate.Port {
	return predicate.Port(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v int) predicate.Port {
	return predicate.Port(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v int) predicate.Port {
	return predicate.Port(sql.FieldLTE(FieldHost, v))
}

// BindEQ applies the EQ predicate on the "bind" field.
func BindEQ(v int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldBind, v))
}

// BindNEQ applies the NEQ predicate on the "bind" field.
func BindNEQ(v int) predicate.Port {
	return predicate.Port(sql.FieldNEQ(FieldBind, v))
}

// BindIn applies the In predicate on the "bind" field.
func BindIn(vs ...int) predicate.Port {
	return predicate.Port(sql.FieldIn(FieldBind, vs...))
}

// BindNotIn applies the NotIn predicate on the "bind" field.
func BindNotIn(vs ...int) predicate.Port {
	return predicate.Port(sql.FieldNotIn(FieldBind, vs...))
}

// BindGT applies the GT predicate on the "bind" field.
func BindGT(v int) predicate.Port {
	return predicate.Port(sql.FieldGT(FieldBind, v))
}

// BindGTE applies the GTE predicate on the "bind" field.
func BindGTE(v int) predicate.Port {
	return predicate.Port(sql.FieldGTE(FieldBind, v))
}

// BindLT applies the LT predicate on the "bind" field.
func BindLT(v int) predicate.Port {
	return predicate.Port(sql.FieldLT(FieldBind, v))
}

// BindLTE applies the LTE predicate on the "bind" field.
func BindLTE(v int) predicate.Port {
	return predicate.Port(sql.FieldLTE(FieldBind, v))
}

// ProtocolEQ applies the EQ predicate on the "protocol" field.
func ProtocolEQ(v int) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldProtocol, v))
}

// ProtocolNEQ applies the NEQ predicate on the "protocol" field.
func ProtocolNEQ(v int) predicate.Port {
	return predicate.Port(sql.FieldNEQ(FieldProtocol, v))
}

// ProtocolIn applies the In predicate on the "protocol" field.
func ProtocolIn(vs ...int) predicate.Port {
	return predicate.Port(sql.FieldIn(FieldProtocol, vs...))
}

// ProtocolNotIn applies the NotIn predicate on the "protocol" field.
func ProtocolNotIn(vs ...int) predicate.Port {
	return predicate.Port(sql.FieldNotIn(FieldProtocol, vs...))
}

// ProtocolGT applies the GT predicate on the "protocol" field.
func ProtocolGT(v int) predicate.Port {
	return predicate.Port(sql.FieldGT(FieldProtocol, v))
}

// ProtocolGTE applies the GTE predicate on the "protocol" field.
func ProtocolGTE(v int) predicate.Port {
	return predicate.Port(sql.FieldGTE(FieldProtocol, v))
}

// ProtocolLT applies the LT predicate on the "protocol" field.
func ProtocolLT(v int) predicate.Port {
	return predicate.Port(sql.FieldLT(FieldProtocol, v))
}

// ProtocolLTE applies the LTE predicate on the "protocol" field.
func ProtocolLTE(v int) predicate.Port {
	return predicate.Port(sql.FieldLTE(FieldProtocol, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Port {
	return predicate.Port(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Port {
	return predicate.Port(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Port {
	return predicate.Port(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Port {
	return predicate.Port(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Port {
	return predicate.Port(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Port {
	return predicate.Port(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Port {
	return predicate.Port(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Port {
	return predicate.Port(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Port {
	return predicate.Port(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Port {
	return predicate.Port(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Port {
	return predicate.Port(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Port {
	return predicate.Port(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Port {
	return predicate.Port(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Port {
	return predicate.Port(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Port {
	return predicate.Port(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Port {
	return predicate.Port(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, OwnerTable, OwnerPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Container) predicate.Port {
	return predicate.Port(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Port) predicate.Port {
	return predicate.Port(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Port) predicate.Port {
	return predicate.Port(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Port) predicate.Port {
	return predicate.Port(sql.NotPredicates(p))
}
