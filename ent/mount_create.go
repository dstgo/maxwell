// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/mount"
)

// MountCreate is the builder for creating a Mount entity.
type MountCreate struct {
	config
	mutation *MountMutation
	hooks    []Hook
}

// SetHost sets the "host" field.
func (mc *MountCreate) SetHost(s string) *MountCreate {
	mc.mutation.SetHost(s)
	return mc
}

// SetBind sets the "bind" field.
func (mc *MountCreate) SetBind(s string) *MountCreate {
	mc.mutation.SetBind(s)
	return mc
}

// SetIsDir sets the "is_dir" field.
func (mc *MountCreate) SetIsDir(b bool) *MountCreate {
	mc.mutation.SetIsDir(b)
	return mc
}

// SetCreatedAt sets the "created_at" field.
func (mc *MountCreate) SetCreatedAt(i int64) *MountCreate {
	mc.mutation.SetCreatedAt(i)
	return mc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mc *MountCreate) SetNillableCreatedAt(i *int64) *MountCreate {
	if i != nil {
		mc.SetCreatedAt(*i)
	}
	return mc
}

// SetUpdatedAt sets the "updated_at" field.
func (mc *MountCreate) SetUpdatedAt(i int64) *MountCreate {
	mc.mutation.SetUpdatedAt(i)
	return mc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (mc *MountCreate) SetNillableUpdatedAt(i *int64) *MountCreate {
	if i != nil {
		mc.SetUpdatedAt(*i)
	}
	return mc
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (mc *MountCreate) AddOwnerIDs(ids ...int) *MountCreate {
	mc.mutation.AddOwnerIDs(ids...)
	return mc
}

// AddOwner adds the "owner" edges to the Container entity.
func (mc *MountCreate) AddOwner(c ...*Container) *MountCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mc.AddOwnerIDs(ids...)
}

// Mutation returns the MountMutation object of the builder.
func (mc *MountCreate) Mutation() *MountMutation {
	return mc.mutation
}

// Save creates the Mount in the database.
func (mc *MountCreate) Save(ctx context.Context) (*Mount, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MountCreate) SaveX(ctx context.Context) *Mount {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MountCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MountCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MountCreate) defaults() {
	if _, ok := mc.mutation.CreatedAt(); !ok {
		v := mount.DefaultCreatedAt()
		mc.mutation.SetCreatedAt(v)
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		v := mount.DefaultUpdatedAt()
		mc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MountCreate) check() error {
	if _, ok := mc.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required field "Mount.host"`)}
	}
	if _, ok := mc.mutation.Bind(); !ok {
		return &ValidationError{Name: "bind", err: errors.New(`ent: missing required field "Mount.bind"`)}
	}
	if _, ok := mc.mutation.IsDir(); !ok {
		return &ValidationError{Name: "is_dir", err: errors.New(`ent: missing required field "Mount.is_dir"`)}
	}
	if _, ok := mc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Mount.created_at"`)}
	}
	if _, ok := mc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Mount.updated_at"`)}
	}
	return nil
}

func (mc *MountCreate) sqlSave(ctx context.Context) (*Mount, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MountCreate) createSpec() (*Mount, *sqlgraph.CreateSpec) {
	var (
		_node = &Mount{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(mount.Table, sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt))
	)
	if value, ok := mc.mutation.Host(); ok {
		_spec.SetField(mount.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := mc.mutation.Bind(); ok {
		_spec.SetField(mount.FieldBind, field.TypeString, value)
		_node.Bind = value
	}
	if value, ok := mc.mutation.IsDir(); ok {
		_spec.SetField(mount.FieldIsDir, field.TypeBool, value)
		_node.IsDir = value
	}
	if value, ok := mc.mutation.CreatedAt(); ok {
		_spec.SetField(mount.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := mc.mutation.UpdatedAt(); ok {
		_spec.SetField(mount.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if nodes := mc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MountCreateBulk is the builder for creating many Mount entities in bulk.
type MountCreateBulk struct {
	config
	err      error
	builders []*MountCreate
}

// Save creates the Mount entities in the database.
func (mcb *MountCreateBulk) Save(ctx context.Context) ([]*Mount, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mount, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MountMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MountCreateBulk) SaveX(ctx context.Context) []*Mount {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MountCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MountCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}
