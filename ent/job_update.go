// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/job"
	"github.com/dstgo/maxwell/ent/predicate"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetName sets the "name" field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ju *JobUpdate) SetNillableName(s *string) *JobUpdate {
	if s != nil {
		ju.SetName(*s)
	}
	return ju
}

// SetDescription sets the "description" field.
func (ju *JobUpdate) SetDescription(s string) *JobUpdate {
	ju.mutation.SetDescription(s)
	return ju
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ju *JobUpdate) SetNillableDescription(s *string) *JobUpdate {
	if s != nil {
		ju.SetDescription(*s)
	}
	return ju
}

// SetJobType sets the "job_type" field.
func (ju *JobUpdate) SetJobType(i int) *JobUpdate {
	ju.mutation.ResetJobType()
	ju.mutation.SetJobType(i)
	return ju
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (ju *JobUpdate) SetNillableJobType(i *int) *JobUpdate {
	if i != nil {
		ju.SetJobType(*i)
	}
	return ju
}

// AddJobType adds i to the "job_type" field.
func (ju *JobUpdate) AddJobType(i int) *JobUpdate {
	ju.mutation.AddJobType(i)
	return ju
}

// SetCreatedAt sets the "created_at" field.
func (ju *JobUpdate) SetCreatedAt(i int64) *JobUpdate {
	ju.mutation.ResetCreatedAt()
	ju.mutation.SetCreatedAt(i)
	return ju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatedAt(i *int64) *JobUpdate {
	if i != nil {
		ju.SetCreatedAt(*i)
	}
	return ju
}

// AddCreatedAt adds i to the "created_at" field.
func (ju *JobUpdate) AddCreatedAt(i int64) *JobUpdate {
	ju.mutation.AddCreatedAt(i)
	return ju
}

// SetUpdatedAt sets the "updated_at" field.
func (ju *JobUpdate) SetUpdatedAt(i int64) *JobUpdate {
	ju.mutation.ResetUpdatedAt()
	ju.mutation.SetUpdatedAt(i)
	return ju
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ju *JobUpdate) AddUpdatedAt(i int64) *JobUpdate {
	ju.mutation.AddUpdatedAt(i)
	return ju
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (ju *JobUpdate) AddOwnerIDs(ids ...int) *JobUpdate {
	ju.mutation.AddOwnerIDs(ids...)
	return ju
}

// AddOwner adds the "owner" edges to the Container entity.
func (ju *JobUpdate) AddOwner(c ...*Container) *JobUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ju.AddOwnerIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearOwner clears all "owner" edges to the Container entity.
func (ju *JobUpdate) ClearOwner() *JobUpdate {
	ju.mutation.ClearOwner()
	return ju
}

// RemoveOwnerIDs removes the "owner" edge to Container entities by IDs.
func (ju *JobUpdate) RemoveOwnerIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveOwnerIDs(ids...)
	return ju
}

// RemoveOwner removes "owner" edges to Container entities.
func (ju *JobUpdate) RemoveOwner(c ...*Container) *JobUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ju.RemoveOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		ju.mutation.SetUpdatedAt(v)
	}
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := ju.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if value, ok := ju.mutation.JobType(); ok {
		_spec.SetField(job.FieldJobType, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedJobType(); ok {
		_spec.AddField(job.FieldJobType, field.TypeInt, value)
	}
	if value, ok := ju.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ju.mutation.AddedCreatedAt(); ok {
		_spec.AddField(job.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := ju.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ju.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(job.FieldUpdatedAt, field.TypeInt64, value)
	}
	if ju.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: job.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !ju.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: job.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: job.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetName sets the "name" field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetName(*s)
	}
	return juo
}

// SetDescription sets the "description" field.
func (juo *JobUpdateOne) SetDescription(s string) *JobUpdateOne {
	juo.mutation.SetDescription(s)
	return juo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDescription(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetDescription(*s)
	}
	return juo
}

// SetJobType sets the "job_type" field.
func (juo *JobUpdateOne) SetJobType(i int) *JobUpdateOne {
	juo.mutation.ResetJobType()
	juo.mutation.SetJobType(i)
	return juo
}

// SetNillableJobType sets the "job_type" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableJobType(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetJobType(*i)
	}
	return juo
}

// AddJobType adds i to the "job_type" field.
func (juo *JobUpdateOne) AddJobType(i int) *JobUpdateOne {
	juo.mutation.AddJobType(i)
	return juo
}

// SetCreatedAt sets the "created_at" field.
func (juo *JobUpdateOne) SetCreatedAt(i int64) *JobUpdateOne {
	juo.mutation.ResetCreatedAt()
	juo.mutation.SetCreatedAt(i)
	return juo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatedAt(i *int64) *JobUpdateOne {
	if i != nil {
		juo.SetCreatedAt(*i)
	}
	return juo
}

// AddCreatedAt adds i to the "created_at" field.
func (juo *JobUpdateOne) AddCreatedAt(i int64) *JobUpdateOne {
	juo.mutation.AddCreatedAt(i)
	return juo
}

// SetUpdatedAt sets the "updated_at" field.
func (juo *JobUpdateOne) SetUpdatedAt(i int64) *JobUpdateOne {
	juo.mutation.ResetUpdatedAt()
	juo.mutation.SetUpdatedAt(i)
	return juo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (juo *JobUpdateOne) AddUpdatedAt(i int64) *JobUpdateOne {
	juo.mutation.AddUpdatedAt(i)
	return juo
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (juo *JobUpdateOne) AddOwnerIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddOwnerIDs(ids...)
	return juo
}

// AddOwner adds the "owner" edges to the Container entity.
func (juo *JobUpdateOne) AddOwner(c ...*Container) *JobUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return juo.AddOwnerIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearOwner clears all "owner" edges to the Container entity.
func (juo *JobUpdateOne) ClearOwner() *JobUpdateOne {
	juo.mutation.ClearOwner()
	return juo
}

// RemoveOwnerIDs removes the "owner" edge to Container entities by IDs.
func (juo *JobUpdateOne) RemoveOwnerIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveOwnerIDs(ids...)
	return juo
}

// RemoveOwner removes "owner" edges to Container entities.
func (juo *JobUpdateOne) RemoveOwner(c ...*Container) *JobUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return juo.RemoveOwnerIDs(ids...)
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.UpdatedAt(); !ok {
		v := job.UpdateDefaultUpdatedAt()
		juo.mutation.SetUpdatedAt(v)
	}
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := juo.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if value, ok := juo.mutation.JobType(); ok {
		_spec.SetField(job.FieldJobType, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedJobType(); ok {
		_spec.AddField(job.FieldJobType, field.TypeInt, value)
	}
	if value, ok := juo.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := juo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(job.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := juo.mutation.UpdatedAt(); ok {
		_spec.SetField(job.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := juo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(job.FieldUpdatedAt, field.TypeInt64, value)
	}
	if juo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: job.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !juo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: job.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   job.OwnerTable,
			Columns: job.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
