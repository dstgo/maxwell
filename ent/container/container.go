// Code generated by ent, DO NOT EDIT.

package container

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the container type in the database.
	Label = "container"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldCid holds the string denoting the cid field in the database.
	FieldCid = "cid"
	// FieldImage holds the string denoting the image field in the database.
	FieldImage = "image"
	// FieldCPU holds the string denoting the cpu field in the database.
	FieldCPU = "cpu"
	// FieldMemory holds the string denoting the memory field in the database.
	FieldMemory = "memory"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeNode holds the string denoting the node edge name in mutations.
	EdgeNode = "node"
	// EdgeMounts holds the string denoting the mounts edge name in mutations.
	EdgeMounts = "mounts"
	// EdgePorts holds the string denoting the ports edge name in mutations.
	EdgePorts = "ports"
	// EdgeJobs holds the string denoting the jobs edge name in mutations.
	EdgeJobs = "jobs"
	// Table holds the table name of the container in the database.
	Table = "containers"
	// OwnerTable is the table that holds the owner relation/edge. The primary key declared below.
	OwnerTable = "user_containers"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// NodeTable is the table that holds the node relation/edge. The primary key declared below.
	NodeTable = "node_containers"
	// NodeInverseTable is the table name for the Node entity.
	// It exists in this package in order to avoid circular dependency with the "node" package.
	NodeInverseTable = "nodes"
	// MountsTable is the table that holds the mounts relation/edge. The primary key declared below.
	MountsTable = "container_mounts"
	// MountsInverseTable is the table name for the Mount entity.
	// It exists in this package in order to avoid circular dependency with the "mount" package.
	MountsInverseTable = "mounts"
	// PortsTable is the table that holds the ports relation/edge. The primary key declared below.
	PortsTable = "container_ports"
	// PortsInverseTable is the table name for the Port entity.
	// It exists in this package in order to avoid circular dependency with the "port" package.
	PortsInverseTable = "ports"
	// JobsTable is the table that holds the jobs relation/edge. The primary key declared below.
	JobsTable = "container_jobs"
	// JobsInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobsInverseTable = "jobs"
)

// Columns holds all SQL columns for container fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldCid,
	FieldImage,
	FieldCPU,
	FieldMemory,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// OwnerPrimaryKey and OwnerColumn2 are the table columns denoting the
	// primary key for the owner relation (M2M).
	OwnerPrimaryKey = []string{"user_id", "container_id"}
	// NodePrimaryKey and NodeColumn2 are the table columns denoting the
	// primary key for the node relation (M2M).
	NodePrimaryKey = []string{"node_id", "container_id"}
	// MountsPrimaryKey and MountsColumn2 are the table columns denoting the
	// primary key for the mounts relation (M2M).
	MountsPrimaryKey = []string{"container_id", "mount_id"}
	// PortsPrimaryKey and PortsColumn2 are the table columns denoting the
	// primary key for the ports relation (M2M).
	PortsPrimaryKey = []string{"container_id", "port_id"}
	// JobsPrimaryKey and JobsColumn2 are the table columns denoting the
	// primary key for the jobs relation (M2M).
	JobsPrimaryKey = []string{"container_id", "job_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() int64
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() int64
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() int64
)

// OrderOption defines the ordering options for the Container queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByCid orders the results by the cid field.
func ByCid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCid, opts...).ToFunc()
}

// ByImage orders the results by the image field.
func ByImage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldImage, opts...).ToFunc()
}

// ByCPU orders the results by the cpu field.
func ByCPU(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCPU, opts...).ToFunc()
}

// ByMemory orders the results by the memory field.
func ByMemory(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMemory, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOwnerCount orders the results by owner count.
func ByOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerStep(), opts...)
	}
}

// ByOwner orders the results by owner terms.
func ByOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodeCount orders the results by node count.
func ByNodeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeStep(), opts...)
	}
}

// ByNode orders the results by node terms.
func ByNode(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMountsCount orders the results by mounts count.
func ByMountsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMountsStep(), opts...)
	}
}

// ByMounts orders the results by mounts terms.
func ByMounts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMountsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPortsCount orders the results by ports count.
func ByPortsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPortsStep(), opts...)
	}
}

// ByPorts orders the results by ports terms.
func ByPorts(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPortsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByJobsCount orders the results by jobs count.
func ByJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newJobsStep(), opts...)
	}
}

// ByJobs orders the results by jobs terms.
func ByJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, OwnerTable, OwnerPrimaryKey...),
	)
}
func newNodeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, NodeTable, NodePrimaryKey...),
	)
}
func newMountsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MountsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, MountsTable, MountsPrimaryKey...),
	)
}
func newPortsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PortsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, PortsTable, PortsPrimaryKey...),
	)
}
func newJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, JobsTable, JobsPrimaryKey...),
	)
}
