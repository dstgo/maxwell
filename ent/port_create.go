// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/port"
)

// PortCreate is the builder for creating a Port entity.
type PortCreate struct {
	config
	mutation *PortMutation
	hooks    []Hook
}

// SetHost sets the "host" field.
func (pc *PortCreate) SetHost(i int) *PortCreate {
	pc.mutation.SetHost(i)
	return pc
}

// SetBind sets the "bind" field.
func (pc *PortCreate) SetBind(i int) *PortCreate {
	pc.mutation.SetBind(i)
	return pc
}

// SetProtocol sets the "protocol" field.
func (pc *PortCreate) SetProtocol(i int) *PortCreate {
	pc.mutation.SetProtocol(i)
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PortCreate) SetCreatedAt(i int64) *PortCreate {
	pc.mutation.SetCreatedAt(i)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PortCreate) SetNillableCreatedAt(i *int64) *PortCreate {
	if i != nil {
		pc.SetCreatedAt(*i)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PortCreate) SetUpdatedAt(i int64) *PortCreate {
	pc.mutation.SetUpdatedAt(i)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PortCreate) SetNillableUpdatedAt(i *int64) *PortCreate {
	if i != nil {
		pc.SetUpdatedAt(*i)
	}
	return pc
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (pc *PortCreate) AddOwnerIDs(ids ...int) *PortCreate {
	pc.mutation.AddOwnerIDs(ids...)
	return pc
}

// AddOwner adds the "owner" edges to the Container entity.
func (pc *PortCreate) AddOwner(c ...*Container) *PortCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pc.AddOwnerIDs(ids...)
}

// Mutation returns the PortMutation object of the builder.
func (pc *PortCreate) Mutation() *PortMutation {
	return pc.mutation
}

// Save creates the Port in the database.
func (pc *PortCreate) Save(ctx context.Context) (*Port, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PortCreate) SaveX(ctx context.Context) *Port {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PortCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PortCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PortCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := port.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := port.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PortCreate) check() error {
	if _, ok := pc.mutation.Host(); !ok {
		return &ValidationError{Name: "host", err: errors.New(`ent: missing required field "Port.host"`)}
	}
	if _, ok := pc.mutation.Bind(); !ok {
		return &ValidationError{Name: "bind", err: errors.New(`ent: missing required field "Port.bind"`)}
	}
	if _, ok := pc.mutation.Protocol(); !ok {
		return &ValidationError{Name: "protocol", err: errors.New(`ent: missing required field "Port.protocol"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Port.created_at"`)}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Port.updated_at"`)}
	}
	return nil
}

func (pc *PortCreate) sqlSave(ctx context.Context) (*Port, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PortCreate) createSpec() (*Port, *sqlgraph.CreateSpec) {
	var (
		_node = &Port{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(port.Table, sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt))
	)
	if value, ok := pc.mutation.Host(); ok {
		_spec.SetField(port.FieldHost, field.TypeInt, value)
		_node.Host = value
	}
	if value, ok := pc.mutation.Bind(); ok {
		_spec.SetField(port.FieldBind, field.TypeInt, value)
		_node.Bind = value
	}
	if value, ok := pc.mutation.Protocol(); ok {
		_spec.SetField(port.FieldProtocol, field.TypeInt, value)
		_node.Protocol = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(port.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(port.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if nodes := pc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PortCreateBulk is the builder for creating many Port entities in bulk.
type PortCreateBulk struct {
	config
	err      error
	builders []*PortCreate
}

// Save creates the Port entities in the database.
func (pcb *PortCreateBulk) Save(ctx context.Context) ([]*Port, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Port, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PortMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PortCreateBulk) SaveX(ctx context.Context) []*Port {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PortCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PortCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
