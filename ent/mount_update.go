// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/mount"
	"github.com/dstgo/maxwell/ent/predicate"
)

// MountUpdate is the builder for updating Mount entities.
type MountUpdate struct {
	config
	hooks    []Hook
	mutation *MountMutation
}

// Where appends a list predicates to the MountUpdate builder.
func (mu *MountUpdate) Where(ps ...predicate.Mount) *MountUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetHost sets the "host" field.
func (mu *MountUpdate) SetHost(s string) *MountUpdate {
	mu.mutation.SetHost(s)
	return mu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (mu *MountUpdate) SetNillableHost(s *string) *MountUpdate {
	if s != nil {
		mu.SetHost(*s)
	}
	return mu
}

// SetBind sets the "bind" field.
func (mu *MountUpdate) SetBind(s string) *MountUpdate {
	mu.mutation.SetBind(s)
	return mu
}

// SetNillableBind sets the "bind" field if the given value is not nil.
func (mu *MountUpdate) SetNillableBind(s *string) *MountUpdate {
	if s != nil {
		mu.SetBind(*s)
	}
	return mu
}

// SetIsDir sets the "is_dir" field.
func (mu *MountUpdate) SetIsDir(b bool) *MountUpdate {
	mu.mutation.SetIsDir(b)
	return mu
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (mu *MountUpdate) SetNillableIsDir(b *bool) *MountUpdate {
	if b != nil {
		mu.SetIsDir(*b)
	}
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MountUpdate) SetCreatedAt(i int64) *MountUpdate {
	mu.mutation.ResetCreatedAt()
	mu.mutation.SetCreatedAt(i)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MountUpdate) SetNillableCreatedAt(i *int64) *MountUpdate {
	if i != nil {
		mu.SetCreatedAt(*i)
	}
	return mu
}

// AddCreatedAt adds i to the "created_at" field.
func (mu *MountUpdate) AddCreatedAt(i int64) *MountUpdate {
	mu.mutation.AddCreatedAt(i)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MountUpdate) SetUpdatedAt(i int64) *MountUpdate {
	mu.mutation.ResetUpdatedAt()
	mu.mutation.SetUpdatedAt(i)
	return mu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (mu *MountUpdate) AddUpdatedAt(i int64) *MountUpdate {
	mu.mutation.AddUpdatedAt(i)
	return mu
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (mu *MountUpdate) AddOwnerIDs(ids ...int) *MountUpdate {
	mu.mutation.AddOwnerIDs(ids...)
	return mu
}

// AddOwner adds the "owner" edges to the Container entity.
func (mu *MountUpdate) AddOwner(c ...*Container) *MountUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.AddOwnerIDs(ids...)
}

// Mutation returns the MountMutation object of the builder.
func (mu *MountUpdate) Mutation() *MountMutation {
	return mu.mutation
}

// ClearOwner clears all "owner" edges to the Container entity.
func (mu *MountUpdate) ClearOwner() *MountUpdate {
	mu.mutation.ClearOwner()
	return mu
}

// RemoveOwnerIDs removes the "owner" edge to Container entities by IDs.
func (mu *MountUpdate) RemoveOwnerIDs(ids ...int) *MountUpdate {
	mu.mutation.RemoveOwnerIDs(ids...)
	return mu
}

// RemoveOwner removes "owner" edges to Container entities.
func (mu *MountUpdate) RemoveOwner(c ...*Container) *MountUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return mu.RemoveOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MountUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MountUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MountUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MountUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MountUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := mount.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

func (mu *MountUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mount.Table, mount.Columns, sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Host(); ok {
		_spec.SetField(mount.FieldHost, field.TypeString, value)
	}
	if value, ok := mu.mutation.Bind(); ok {
		_spec.SetField(mount.FieldBind, field.TypeString, value)
	}
	if value, ok := mu.mutation.IsDir(); ok {
		_spec.SetField(mount.FieldIsDir, field.TypeBool, value)
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(mount.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(mount.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(mount.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := mu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(mount.FieldUpdatedAt, field.TypeInt64, value)
	}
	if mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MountUpdateOne is the builder for updating a single Mount entity.
type MountUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MountMutation
}

// SetHost sets the "host" field.
func (muo *MountUpdateOne) SetHost(s string) *MountUpdateOne {
	muo.mutation.SetHost(s)
	return muo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (muo *MountUpdateOne) SetNillableHost(s *string) *MountUpdateOne {
	if s != nil {
		muo.SetHost(*s)
	}
	return muo
}

// SetBind sets the "bind" field.
func (muo *MountUpdateOne) SetBind(s string) *MountUpdateOne {
	muo.mutation.SetBind(s)
	return muo
}

// SetNillableBind sets the "bind" field if the given value is not nil.
func (muo *MountUpdateOne) SetNillableBind(s *string) *MountUpdateOne {
	if s != nil {
		muo.SetBind(*s)
	}
	return muo
}

// SetIsDir sets the "is_dir" field.
func (muo *MountUpdateOne) SetIsDir(b bool) *MountUpdateOne {
	muo.mutation.SetIsDir(b)
	return muo
}

// SetNillableIsDir sets the "is_dir" field if the given value is not nil.
func (muo *MountUpdateOne) SetNillableIsDir(b *bool) *MountUpdateOne {
	if b != nil {
		muo.SetIsDir(*b)
	}
	return muo
}

// SetCreatedAt sets the "created_at" field.
func (muo *MountUpdateOne) SetCreatedAt(i int64) *MountUpdateOne {
	muo.mutation.ResetCreatedAt()
	muo.mutation.SetCreatedAt(i)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MountUpdateOne) SetNillableCreatedAt(i *int64) *MountUpdateOne {
	if i != nil {
		muo.SetCreatedAt(*i)
	}
	return muo
}

// AddCreatedAt adds i to the "created_at" field.
func (muo *MountUpdateOne) AddCreatedAt(i int64) *MountUpdateOne {
	muo.mutation.AddCreatedAt(i)
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MountUpdateOne) SetUpdatedAt(i int64) *MountUpdateOne {
	muo.mutation.ResetUpdatedAt()
	muo.mutation.SetUpdatedAt(i)
	return muo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (muo *MountUpdateOne) AddUpdatedAt(i int64) *MountUpdateOne {
	muo.mutation.AddUpdatedAt(i)
	return muo
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (muo *MountUpdateOne) AddOwnerIDs(ids ...int) *MountUpdateOne {
	muo.mutation.AddOwnerIDs(ids...)
	return muo
}

// AddOwner adds the "owner" edges to the Container entity.
func (muo *MountUpdateOne) AddOwner(c ...*Container) *MountUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.AddOwnerIDs(ids...)
}

// Mutation returns the MountMutation object of the builder.
func (muo *MountUpdateOne) Mutation() *MountMutation {
	return muo.mutation
}

// ClearOwner clears all "owner" edges to the Container entity.
func (muo *MountUpdateOne) ClearOwner() *MountUpdateOne {
	muo.mutation.ClearOwner()
	return muo
}

// RemoveOwnerIDs removes the "owner" edge to Container entities by IDs.
func (muo *MountUpdateOne) RemoveOwnerIDs(ids ...int) *MountUpdateOne {
	muo.mutation.RemoveOwnerIDs(ids...)
	return muo
}

// RemoveOwner removes "owner" edges to Container entities.
func (muo *MountUpdateOne) RemoveOwner(c ...*Container) *MountUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return muo.RemoveOwnerIDs(ids...)
}

// Where appends a list predicates to the MountUpdate builder.
func (muo *MountUpdateOne) Where(ps ...predicate.Mount) *MountUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MountUpdateOne) Select(field string, fields ...string) *MountUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Mount entity.
func (muo *MountUpdateOne) Save(ctx context.Context) (*Mount, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MountUpdateOne) SaveX(ctx context.Context) *Mount {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MountUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MountUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MountUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := mount.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

func (muo *MountUpdateOne) sqlSave(ctx context.Context) (_node *Mount, err error) {
	_spec := sqlgraph.NewUpdateSpec(mount.Table, mount.Columns, sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Mount.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mount.FieldID)
		for _, f := range fields {
			if !mount.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mount.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Host(); ok {
		_spec.SetField(mount.FieldHost, field.TypeString, value)
	}
	if value, ok := muo.mutation.Bind(); ok {
		_spec.SetField(mount.FieldBind, field.TypeString, value)
	}
	if value, ok := muo.mutation.IsDir(); ok {
		_spec.SetField(mount.FieldIsDir, field.TypeBool, value)
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(mount.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(mount.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(mount.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := muo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(mount.FieldUpdatedAt, field.TypeInt64, value)
	}
	if muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   mount.OwnerTable,
			Columns: mount.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mount{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mount.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
