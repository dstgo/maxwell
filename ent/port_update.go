// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/port"
	"github.com/dstgo/maxwell/ent/predicate"
)

// PortUpdate is the builder for updating Port entities.
type PortUpdate struct {
	config
	hooks    []Hook
	mutation *PortMutation
}

// Where appends a list predicates to the PortUpdate builder.
func (pu *PortUpdate) Where(ps ...predicate.Port) *PortUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetHost sets the "host" field.
func (pu *PortUpdate) SetHost(i int) *PortUpdate {
	pu.mutation.ResetHost()
	pu.mutation.SetHost(i)
	return pu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (pu *PortUpdate) SetNillableHost(i *int) *PortUpdate {
	if i != nil {
		pu.SetHost(*i)
	}
	return pu
}

// AddHost adds i to the "host" field.
func (pu *PortUpdate) AddHost(i int) *PortUpdate {
	pu.mutation.AddHost(i)
	return pu
}

// SetBind sets the "bind" field.
func (pu *PortUpdate) SetBind(i int) *PortUpdate {
	pu.mutation.ResetBind()
	pu.mutation.SetBind(i)
	return pu
}

// SetNillableBind sets the "bind" field if the given value is not nil.
func (pu *PortUpdate) SetNillableBind(i *int) *PortUpdate {
	if i != nil {
		pu.SetBind(*i)
	}
	return pu
}

// AddBind adds i to the "bind" field.
func (pu *PortUpdate) AddBind(i int) *PortUpdate {
	pu.mutation.AddBind(i)
	return pu
}

// SetProtocol sets the "protocol" field.
func (pu *PortUpdate) SetProtocol(i int) *PortUpdate {
	pu.mutation.ResetProtocol()
	pu.mutation.SetProtocol(i)
	return pu
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (pu *PortUpdate) SetNillableProtocol(i *int) *PortUpdate {
	if i != nil {
		pu.SetProtocol(*i)
	}
	return pu
}

// AddProtocol adds i to the "protocol" field.
func (pu *PortUpdate) AddProtocol(i int) *PortUpdate {
	pu.mutation.AddProtocol(i)
	return pu
}

// SetCreatedAt sets the "created_at" field.
func (pu *PortUpdate) SetCreatedAt(i int64) *PortUpdate {
	pu.mutation.ResetCreatedAt()
	pu.mutation.SetCreatedAt(i)
	return pu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pu *PortUpdate) SetNillableCreatedAt(i *int64) *PortUpdate {
	if i != nil {
		pu.SetCreatedAt(*i)
	}
	return pu
}

// AddCreatedAt adds i to the "created_at" field.
func (pu *PortUpdate) AddCreatedAt(i int64) *PortUpdate {
	pu.mutation.AddCreatedAt(i)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PortUpdate) SetUpdatedAt(i int64) *PortUpdate {
	pu.mutation.ResetUpdatedAt()
	pu.mutation.SetUpdatedAt(i)
	return pu
}

// AddUpdatedAt adds i to the "updated_at" field.
func (pu *PortUpdate) AddUpdatedAt(i int64) *PortUpdate {
	pu.mutation.AddUpdatedAt(i)
	return pu
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (pu *PortUpdate) AddOwnerIDs(ids ...int) *PortUpdate {
	pu.mutation.AddOwnerIDs(ids...)
	return pu
}

// AddOwner adds the "owner" edges to the Container entity.
func (pu *PortUpdate) AddOwner(c ...*Container) *PortUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.AddOwnerIDs(ids...)
}

// Mutation returns the PortMutation object of the builder.
func (pu *PortUpdate) Mutation() *PortMutation {
	return pu.mutation
}

// ClearOwner clears all "owner" edges to the Container entity.
func (pu *PortUpdate) ClearOwner() *PortUpdate {
	pu.mutation.ClearOwner()
	return pu
}

// RemoveOwnerIDs removes the "owner" edge to Container entities by IDs.
func (pu *PortUpdate) RemoveOwnerIDs(ids ...int) *PortUpdate {
	pu.mutation.RemoveOwnerIDs(ids...)
	return pu
}

// RemoveOwner removes "owner" edges to Container entities.
func (pu *PortUpdate) RemoveOwner(c ...*Container) *PortUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return pu.RemoveOwnerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PortUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PortUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PortUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PortUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PortUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := port.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

func (pu *PortUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(port.Table, port.Columns, sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Host(); ok {
		_spec.SetField(port.FieldHost, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedHost(); ok {
		_spec.AddField(port.FieldHost, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Bind(); ok {
		_spec.SetField(port.FieldBind, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedBind(); ok {
		_spec.AddField(port.FieldBind, field.TypeInt, value)
	}
	if value, ok := pu.mutation.Protocol(); ok {
		_spec.SetField(port.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedProtocol(); ok {
		_spec.AddField(port.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := pu.mutation.CreatedAt(); ok {
		_spec.SetField(port.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedCreatedAt(); ok {
		_spec.AddField(port.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(port.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(port.FieldUpdatedAt, field.TypeInt64, value)
	}
	if pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !pu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{port.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PortUpdateOne is the builder for updating a single Port entity.
type PortUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortMutation
}

// SetHost sets the "host" field.
func (puo *PortUpdateOne) SetHost(i int) *PortUpdateOne {
	puo.mutation.ResetHost()
	puo.mutation.SetHost(i)
	return puo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (puo *PortUpdateOne) SetNillableHost(i *int) *PortUpdateOne {
	if i != nil {
		puo.SetHost(*i)
	}
	return puo
}

// AddHost adds i to the "host" field.
func (puo *PortUpdateOne) AddHost(i int) *PortUpdateOne {
	puo.mutation.AddHost(i)
	return puo
}

// SetBind sets the "bind" field.
func (puo *PortUpdateOne) SetBind(i int) *PortUpdateOne {
	puo.mutation.ResetBind()
	puo.mutation.SetBind(i)
	return puo
}

// SetNillableBind sets the "bind" field if the given value is not nil.
func (puo *PortUpdateOne) SetNillableBind(i *int) *PortUpdateOne {
	if i != nil {
		puo.SetBind(*i)
	}
	return puo
}

// AddBind adds i to the "bind" field.
func (puo *PortUpdateOne) AddBind(i int) *PortUpdateOne {
	puo.mutation.AddBind(i)
	return puo
}

// SetProtocol sets the "protocol" field.
func (puo *PortUpdateOne) SetProtocol(i int) *PortUpdateOne {
	puo.mutation.ResetProtocol()
	puo.mutation.SetProtocol(i)
	return puo
}

// SetNillableProtocol sets the "protocol" field if the given value is not nil.
func (puo *PortUpdateOne) SetNillableProtocol(i *int) *PortUpdateOne {
	if i != nil {
		puo.SetProtocol(*i)
	}
	return puo
}

// AddProtocol adds i to the "protocol" field.
func (puo *PortUpdateOne) AddProtocol(i int) *PortUpdateOne {
	puo.mutation.AddProtocol(i)
	return puo
}

// SetCreatedAt sets the "created_at" field.
func (puo *PortUpdateOne) SetCreatedAt(i int64) *PortUpdateOne {
	puo.mutation.ResetCreatedAt()
	puo.mutation.SetCreatedAt(i)
	return puo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (puo *PortUpdateOne) SetNillableCreatedAt(i *int64) *PortUpdateOne {
	if i != nil {
		puo.SetCreatedAt(*i)
	}
	return puo
}

// AddCreatedAt adds i to the "created_at" field.
func (puo *PortUpdateOne) AddCreatedAt(i int64) *PortUpdateOne {
	puo.mutation.AddCreatedAt(i)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PortUpdateOne) SetUpdatedAt(i int64) *PortUpdateOne {
	puo.mutation.ResetUpdatedAt()
	puo.mutation.SetUpdatedAt(i)
	return puo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (puo *PortUpdateOne) AddUpdatedAt(i int64) *PortUpdateOne {
	puo.mutation.AddUpdatedAt(i)
	return puo
}

// AddOwnerIDs adds the "owner" edge to the Container entity by IDs.
func (puo *PortUpdateOne) AddOwnerIDs(ids ...int) *PortUpdateOne {
	puo.mutation.AddOwnerIDs(ids...)
	return puo
}

// AddOwner adds the "owner" edges to the Container entity.
func (puo *PortUpdateOne) AddOwner(c ...*Container) *PortUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.AddOwnerIDs(ids...)
}

// Mutation returns the PortMutation object of the builder.
func (puo *PortUpdateOne) Mutation() *PortMutation {
	return puo.mutation
}

// ClearOwner clears all "owner" edges to the Container entity.
func (puo *PortUpdateOne) ClearOwner() *PortUpdateOne {
	puo.mutation.ClearOwner()
	return puo
}

// RemoveOwnerIDs removes the "owner" edge to Container entities by IDs.
func (puo *PortUpdateOne) RemoveOwnerIDs(ids ...int) *PortUpdateOne {
	puo.mutation.RemoveOwnerIDs(ids...)
	return puo
}

// RemoveOwner removes "owner" edges to Container entities.
func (puo *PortUpdateOne) RemoveOwner(c ...*Container) *PortUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return puo.RemoveOwnerIDs(ids...)
}

// Where appends a list predicates to the PortUpdate builder.
func (puo *PortUpdateOne) Where(ps ...predicate.Port) *PortUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PortUpdateOne) Select(field string, fields ...string) *PortUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Port entity.
func (puo *PortUpdateOne) Save(ctx context.Context) (*Port, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PortUpdateOne) SaveX(ctx context.Context) *Port {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PortUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PortUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PortUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := port.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

func (puo *PortUpdateOne) sqlSave(ctx context.Context) (_node *Port, err error) {
	_spec := sqlgraph.NewUpdateSpec(port.Table, port.Columns, sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Port.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, port.FieldID)
		for _, f := range fields {
			if !port.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != port.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Host(); ok {
		_spec.SetField(port.FieldHost, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedHost(); ok {
		_spec.AddField(port.FieldHost, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Bind(); ok {
		_spec.SetField(port.FieldBind, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedBind(); ok {
		_spec.AddField(port.FieldBind, field.TypeInt, value)
	}
	if value, ok := puo.mutation.Protocol(); ok {
		_spec.SetField(port.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedProtocol(); ok {
		_spec.AddField(port.FieldProtocol, field.TypeInt, value)
	}
	if value, ok := puo.mutation.CreatedAt(); ok {
		_spec.SetField(port.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(port.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(port.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(port.FieldUpdatedAt, field.TypeInt64, value)
	}
	if puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedOwnerIDs(); len(nodes) > 0 && !puo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   port.OwnerTable,
			Columns: port.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Port{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{port.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
