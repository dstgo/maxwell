// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dstgo/maxwell/ent/container"
	"github.com/dstgo/maxwell/ent/job"
	"github.com/dstgo/maxwell/ent/mount"
	"github.com/dstgo/maxwell/ent/node"
	"github.com/dstgo/maxwell/ent/port"
	"github.com/dstgo/maxwell/ent/user"
)

// ContainerCreate is the builder for creating a Container entity.
type ContainerCreate struct {
	config
	mutation *ContainerMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (cc *ContainerCreate) SetName(s string) *ContainerCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetCid sets the "cid" field.
func (cc *ContainerCreate) SetCid(s string) *ContainerCreate {
	cc.mutation.SetCid(s)
	return cc
}

// SetImage sets the "image" field.
func (cc *ContainerCreate) SetImage(s string) *ContainerCreate {
	cc.mutation.SetImage(s)
	return cc
}

// SetCPU sets the "cpu" field.
func (cc *ContainerCreate) SetCPU(i int64) *ContainerCreate {
	cc.mutation.SetCPU(i)
	return cc
}

// SetMemory sets the "memory" field.
func (cc *ContainerCreate) SetMemory(i int64) *ContainerCreate {
	cc.mutation.SetMemory(i)
	return cc
}

// SetCreatedAt sets the "created_at" field.
func (cc *ContainerCreate) SetCreatedAt(i int64) *ContainerCreate {
	cc.mutation.SetCreatedAt(i)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ContainerCreate) SetNillableCreatedAt(i *int64) *ContainerCreate {
	if i != nil {
		cc.SetCreatedAt(*i)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ContainerCreate) SetUpdatedAt(i int64) *ContainerCreate {
	cc.mutation.SetUpdatedAt(i)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ContainerCreate) SetNillableUpdatedAt(i *int64) *ContainerCreate {
	if i != nil {
		cc.SetUpdatedAt(*i)
	}
	return cc
}

// AddOwnerIDs adds the "owner" edge to the User entity by IDs.
func (cc *ContainerCreate) AddOwnerIDs(ids ...int) *ContainerCreate {
	cc.mutation.AddOwnerIDs(ids...)
	return cc
}

// AddOwner adds the "owner" edges to the User entity.
func (cc *ContainerCreate) AddOwner(u ...*User) *ContainerCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return cc.AddOwnerIDs(ids...)
}

// AddNodeIDs adds the "node" edge to the Node entity by IDs.
func (cc *ContainerCreate) AddNodeIDs(ids ...int) *ContainerCreate {
	cc.mutation.AddNodeIDs(ids...)
	return cc
}

// AddNode adds the "node" edges to the Node entity.
func (cc *ContainerCreate) AddNode(n ...*Node) *ContainerCreate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return cc.AddNodeIDs(ids...)
}

// AddMountIDs adds the "mounts" edge to the Mount entity by IDs.
func (cc *ContainerCreate) AddMountIDs(ids ...int) *ContainerCreate {
	cc.mutation.AddMountIDs(ids...)
	return cc
}

// AddMounts adds the "mounts" edges to the Mount entity.
func (cc *ContainerCreate) AddMounts(m ...*Mount) *ContainerCreate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMountIDs(ids...)
}

// AddPortIDs adds the "ports" edge to the Port entity by IDs.
func (cc *ContainerCreate) AddPortIDs(ids ...int) *ContainerCreate {
	cc.mutation.AddPortIDs(ids...)
	return cc
}

// AddPorts adds the "ports" edges to the Port entity.
func (cc *ContainerCreate) AddPorts(p ...*Port) *ContainerCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return cc.AddPortIDs(ids...)
}

// AddJobIDs adds the "jobs" edge to the Job entity by IDs.
func (cc *ContainerCreate) AddJobIDs(ids ...int) *ContainerCreate {
	cc.mutation.AddJobIDs(ids...)
	return cc
}

// AddJobs adds the "jobs" edges to the Job entity.
func (cc *ContainerCreate) AddJobs(j ...*Job) *ContainerCreate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return cc.AddJobIDs(ids...)
}

// Mutation returns the ContainerMutation object of the builder.
func (cc *ContainerCreate) Mutation() *ContainerMutation {
	return cc.mutation
}

// Save creates the Container in the database.
func (cc *ContainerCreate) Save(ctx context.Context) (*Container, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ContainerCreate) SaveX(ctx context.Context) *Container {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ContainerCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ContainerCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ContainerCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := container.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := container.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ContainerCreate) check() error {
	if _, ok := cc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Container.name"`)}
	}
	if _, ok := cc.mutation.Cid(); !ok {
		return &ValidationError{Name: "cid", err: errors.New(`ent: missing required field "Container.cid"`)}
	}
	if _, ok := cc.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "Container.image"`)}
	}
	if _, ok := cc.mutation.CPU(); !ok {
		return &ValidationError{Name: "cpu", err: errors.New(`ent: missing required field "Container.cpu"`)}
	}
	if _, ok := cc.mutation.Memory(); !ok {
		return &ValidationError{Name: "memory", err: errors.New(`ent: missing required field "Container.memory"`)}
	}
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Container.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Container.updated_at"`)}
	}
	return nil
}

func (cc *ContainerCreate) sqlSave(ctx context.Context) (*Container, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ContainerCreate) createSpec() (*Container, *sqlgraph.CreateSpec) {
	var (
		_node = &Container{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(container.Table, sqlgraph.NewFieldSpec(container.FieldID, field.TypeInt))
	)
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(container.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.Cid(); ok {
		_spec.SetField(container.FieldCid, field.TypeString, value)
		_node.Cid = value
	}
	if value, ok := cc.mutation.Image(); ok {
		_spec.SetField(container.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := cc.mutation.CPU(); ok {
		_spec.SetField(container.FieldCPU, field.TypeInt64, value)
		_node.CPU = value
	}
	if value, ok := cc.mutation.Memory(); ok {
		_spec.SetField(container.FieldMemory, field.TypeInt64, value)
		_node.Memory = value
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(container.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(container.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if nodes := cc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.OwnerTable,
			Columns: container.OwnerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.NodeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   container.NodeTable,
			Columns: container.NodePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.MountsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.MountsTable,
			Columns: container.MountsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mount.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.PortsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.PortsTable,
			Columns: container.PortsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(port.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.JobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   container.JobsTable,
			Columns: container.JobsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ContainerCreateBulk is the builder for creating many Container entities in bulk.
type ContainerCreateBulk struct {
	config
	err      error
	builders []*ContainerCreate
}

// Save creates the Container entities in the database.
func (ccb *ContainerCreateBulk) Save(ctx context.Context) ([]*Container, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Container, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ContainerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ContainerCreateBulk) SaveX(ctx context.Context) []*Container {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ContainerCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ContainerCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
