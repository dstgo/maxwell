// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dstgo/maxwell/ent/port"
)

// container ports bind info table
type Port struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Host holds the value of the "host" field.
	Host int `json:"host,omitempty"`
	// bind port in container
	Bind int `json:"bind,omitempty"`
	// network protocol
	Protocol int `json:"protocol,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt int64 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortQuery when eager-loading is set.
	Edges        PortEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PortEdges holds the relations/edges for other nodes in the graph.
type PortEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*Container `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e PortEdges) OwnerOrErr() ([]*Container, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Port) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case port.FieldID, port.FieldHost, port.FieldBind, port.FieldProtocol, port.FieldCreatedAt, port.FieldUpdatedAt:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Port fields.
func (po *Port) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case port.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case port.FieldHost:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field host", values[i])
			} else if value.Valid {
				po.Host = int(value.Int64)
			}
		case port.FieldBind:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bind", values[i])
			} else if value.Valid {
				po.Bind = int(value.Int64)
			}
		case port.FieldProtocol:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field protocol", values[i])
			} else if value.Valid {
				po.Protocol = int(value.Int64)
			}
		case port.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Int64
			}
		case port.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Int64
			}
		default:
			po.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Port.
// This includes values selected through modifiers, order, etc.
func (po *Port) Value(name string) (ent.Value, error) {
	return po.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Port entity.
func (po *Port) QueryOwner() *ContainerQuery {
	return NewPortClient(po.config).QueryOwner(po)
}

// Update returns a builder for updating this Port.
// Note that you need to call Port.Unwrap() before calling this method if this Port
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Port) Update() *PortUpdateOne {
	return NewPortClient(po.config).UpdateOne(po)
}

// Unwrap unwraps the Port entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Port) Unwrap() *Port {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Port is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Port) String() string {
	var builder strings.Builder
	builder.WriteString("Port(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("host=")
	builder.WriteString(fmt.Sprintf("%v", po.Host))
	builder.WriteString(", ")
	builder.WriteString("bind=")
	builder.WriteString(fmt.Sprintf("%v", po.Bind))
	builder.WriteString(", ")
	builder.WriteString("protocol=")
	builder.WriteString(fmt.Sprintf("%v", po.Protocol))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", po.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", po.UpdatedAt))
	builder.WriteByte(')')
	return builder.String()
}

// Ports is a parsable slice of Port.
type Ports []*Port
